#!/usr/bin/env bash

# Load environment variables from db.env
source env/db.env

# Function to display help information
show_help() {
  echo "Usage: $0 [-h]"
  echo ""
  echo "This script performs the following operations:"
  echo "1. Selects a SQL or GZ file from the dbdump directory if not provided."
  echo "2. Fixes collation issues by replacing problematic collations in the SQL file."
  echo "3. Creates a new database with a timestamped name and grants privileges to the MySQL user."
  echo "4. Moves all tables from the old database to the newly created database."
  echo "5. Imports the SQL file into the new database."
  echo "6. Transfers selected tables from the old database to the new one based on selected categories."
  echo ""
  echo "Important: This script assumes that the 'bin/n98-magerun2' tool will automatically install"
  echo "the SQL file into a database named 'magento'. To accommodate this, the script first moves"
  echo "the existing database (to make room for the new installation) and then restores specific"
  echo "tables, like 'core_config_data', from the previous database into the newly installed one."
  echo ""
  echo "Options:"
  echo "  -h              Show this help message and exit"
}

# Function to generate a human-readable timestamp for naming the new database
generate_timestamp() {
  date +"%B_%d_%Y_%I_%S%p"  # Example: August_13_2024_11_45AM
}

# Function to select a SQL or GZ file from the dbdump directory
select_file() {
  files=$(bin/cli find dbdump -iregex '.*\.\(sql\|gz\)')
  if [ -z "$files" ]; then
    echo "There are no *.sql or *.gz files in the dbdump directory"
    exit 1
  fi

  select file in $files; do
    if [ -n "$file" ]; then
      echo "$file"
      return
    else
      echo "Invalid selection. Please try again."
      exit 1
    fi
  done
}

# Function to fix the SQL file by replacing the problematic collation
fix_sql_file() {
  local original_file="$1"
  local fixed_file="${original_file%.sql}_fixed.sql"

  # Check if the file contains the problematic collation
  if bin/cli grep -q 'utf8mb4_0900_ai_ci' "$original_file"; then
    # Move the original file to a new fixed file
    bin/cli cp "$original_file" "$fixed_file"

    # Replace the problematic collation in the new file
    bin/cli sed -i 's/utf8mb4_0900_ai_ci/utf8mb4_general_ci/g' "$fixed_file"
  else
    # No need to fix the file if the collation is not present
    fixed_file="$original_file"  # Use the original file as is
  fi

  echo "$fixed_file"
}

# Function to handle archive files (unarchive if needed)
unarchive_file() {
  local file="$1"
  local extension="${file##*.}"

  if [ "$extension" = "gz" ]; then
    local unzipped_file="${file%.gz}"
    bin/cli gunzip -dv "$file"
    echo "$unzipped_file"
  else
    echo "$file"
  fi
}

# Function to create a new database and grant privileges
create_new_database() {
  local old_db_name="$MYSQL_DATABASE"
  local timestamp="$1"
  local new_db_name="${old_db_name}_${timestamp}"

  echo "Creating new database '$new_db_name'..."

  # Create the new database
  bin/cli mysqladmin -h"${MYSQL_HOST}" -uroot -p"${MYSQL_ROOT_PASSWORD}" create "${new_db_name}"

  # Grant privileges to the ${MYSQL_USER} for the new database
  bin/cli mysql -uroot -p"${MYSQL_ROOT_PASSWORD}" -h"${MYSQL_HOST}" -e "GRANT ALL PRIVILEGES ON ${new_db_name}.* TO '${MYSQL_USER}'@'%'; FLUSH PRIVILEGES;"
}

# Function to move all tables from the old database to the new one with progress
copy_tables_to_new_database() {
  local old_db_name="$1"
  local timestamp="$2"
  local new_db_name="${old_db_name}_${timestamp}"

  echo "Moving tables from '$old_db_name' to '$new_db_name'..."

  tables=$(bin/cli mysql -h"${MYSQL_HOST}" -uroot -p"${MYSQL_ROOT_PASSWORD}" -e "SHOW TABLES IN ${old_db_name};" | tail -n +2)
  total_tables=$(echo "$tables" | wc -l)
  copied_tables=0

  for table in $tables; do
    bin/cli mysql -h"${MYSQL_HOST}" -uroot -p"${MYSQL_ROOT_PASSWORD}" -e "CREATE TABLE ${new_db_name}.${table} LIKE ${old_db_name}.${table};"
    bin/cli mysql -h"${MYSQL_HOST}" -uroot -p"${MYSQL_ROOT_PASSWORD}" -e "INSERT INTO ${new_db_name}.${table} SELECT * FROM ${old_db_name}.${table};"
    copied_tables=$((copied_tables + 1))

    # Update the progress on the same line
    printf "\rCopied %d/%d tables. Remaining: %d..." "$copied_tables" "$total_tables" "$((total_tables - copied_tables))"
  done

  echo -e "\nTables moved successfully to '$new_db_name'."
}

# Function to import a SQL file into the new database
import_sql_file() {
  local file="$1"
  echo "Using file: $file"

  # Unarchive if needed and fix collation
  local unarchived_file
  unarchived_file=$(unarchive_file "$file")
  local fixed_file
  fixed_file=$(fix_sql_file "$unarchived_file")

  echo "Importing $fixed_file into the new database..."
  bin/n98-magerun2 -v db:import "$fixed_file"
}

# Function to transfer selected tables from the old database to the new one based on categories
transfer_selected_tables() {
  local old_db_name="$1"
  local timestamp="$2"
  local new_db_name="${old_db_name}_${timestamp}"

  # Define table lists for each category
  core_tables="core_config_data admin_user admin_passwords authorization_role authorization_rule admin_user_session"
  catalog_tables="catalog_product_entity catalog_category_entity cataloginventory_stock_item"
  sales_tables="sales_order sales_order_item sales_order_grid"
  customer_tables="customer_entity customer_address_entity"

  # Define a variable for all tables combined
  all_tables="$core_tables $catalog_tables $sales_tables $customer_tables"

  echo "Please select categories to transfer (you can select multiple categories, separate by spaces):"
  echo "1) Core Tables"
  echo "2) Catalog Tables"
  echo "3) Sales Tables"
  echo "4) Customer Tables"
  echo "5) All Tables above"
  read -p "Enter your choice(s) (e.g. 1 3 for Core and Sales tables): " choices

  # Initialize the list of selected tables
  selected_tables=""

  # Loop through the user's choices
  for choice in $choices; do
    case $choice in
      1)
        selected_tables="$selected_tables $core_tables"
        ;;
      2)
        selected_tables="$selected_tables $catalog_tables"
        ;;
      3)
        selected_tables="$selected_tables $sales_tables"
        ;;
      4)
        selected_tables="$selected_tables $customer_tables"
        ;;
      5)
        selected_tables="$selected_tables $all_tables"
        break  # No need to process further choices if 'All Tables' is selected
        ;;
      *)
        echo "Invalid selection: $choice"
        ;;
    esac
  done

  # Trim leading and trailing spaces from selected_tables
  selected_tables=$(echo "$selected_tables" | xargs)

  if [ -z "$selected_tables" ]; then
    echo "No valid tables selected. Exiting..."
    return
  fi

  echo "Transferring selected tables: $selected_tables"

  for table in $selected_tables; do
    echo "Transferring table: $table"
    bin/cli mysql -h"${MYSQL_HOST}" -uroot -p"${MYSQL_ROOT_PASSWORD}" \
        -e "SET FOREIGN_KEY_CHECKS = 0; DROP TABLE IF EXISTS ${old_db_name}.${table};"

    bin/cli mysql -h"${MYSQL_HOST}" -uroot -p"${MYSQL_ROOT_PASSWORD}" \
        -e "CREATE TABLE ${old_db_name}.${table} LIKE ${new_db_name}.${table};"

    bin/cli mysql -h"${MYSQL_HOST}" -uroot -p"${MYSQL_ROOT_PASSWORD}" \
        -e "INSERT INTO ${old_db_name}.${table} SELECT * FROM ${new_db_name}.${table};"
  done

  bin/cli mysql -h"${MYSQL_HOST}" -uroot -p"${MYSQL_ROOT_PASSWORD}" \
      -e "SET FOREIGN_KEY_CHECKS = 1;"

  echo "Selected tables transferred successfully to '${old_db_name}'."
}

# Main script execution
if [[ "$1" == "-h" ]]; then
  show_help
  exit 0
fi

echo "Please select a file to import:"
if [ -z "$1" ]; then
  path=$(select_file)
else
  path="$1"
fi

# Generate the timestamp only once
timestamp=$(generate_timestamp)

# Create the new database and grant privileges
create_new_database "$timestamp"

# Move tables from the old database to the new one with progress indicator
copy_tables_to_new_database "${MYSQL_DATABASE}" "$timestamp"

# Import the selected SQL file into the newly created database
import_sql_file "$path"

# Allow user to select categories and transfer corresponding tables
transfer_selected_tables "${MYSQL_DATABASE}" "$timestamp"

echo "Database update complete."
