#!/usr/bin/env bash

# Check if the argument is provided
[ -z "$1" ] && echo "Please specify a directory or file to copy from container (ex. vendor, --all)" && exit

# Get the absolute path of the src directory
REAL_SRC=$(cd -P "src" && pwd)
# Create the src directory if it doesn't exist
[ ! -d "$REAL_SRC" ] && mkdir -p "$REAL_SRC"

# Get the container ID once to avoid repeated calls
CONTAINER_ID=$(bin/docker-compose ps -q phpfpm)

# Function to get the size of the directory or file
get_size() {
  local src_path=$1
  docker exec "$CONTAINER_ID" du -sb "/var/www/html/$src_path" | awk '{print $1}'
}

# Function to get the size of the tarball
get_tarball_size() {
  local src_path=$1
  docker exec "$CONTAINER_ID" sh -c "tar -cf - -C /var/www/html $src_path | wc -c" | awk '{print $1}'
}

# Function to copy files with a progress bar and seconds counter
copy_with_progress() {
  local src_path=$1
  local dest_path=$2

  # Get the size of the tarball
  local total_size=$(get_tarball_size "$src_path")

  # Record the start time
  local start_time=$(date +%s)

  # Run the copy operation with a progress bar
  docker exec "$CONTAINER_ID" tar -cf - -C /var/www/html "$src_path" | pv -s "$total_size" | tar -xf - -C "$dest_path"

  # Record the end time
  local end_time=$(date +%s)

  # Calculate the elapsed time
  local elapsed_time=$((end_time - start_time))

  # Display the elapsed time in seconds
  echo "Copy completed in ${elapsed_time} seconds."
}

# If --all is specified, copy everything from the container to the host
if [ "$1" == "--all" ]; then
  copy_with_progress "." "$REAL_SRC"
  echo "Completed copying all files from container to host"
else
  # Determine if the argument is a file or directory and copy accordingly
  if bin/cli [ -f "$1" ]; then
    copy_with_progress "$1" "$REAL_SRC"
  else
    TARGET_DIR="$REAL_SRC/$(dirname "$1")"
    [ ! -d "$TARGET_DIR" ] && mkdir -p "$TARGET_DIR"
    copy_with_progress "$1" "$TARGET_DIR"
  fi
  echo "Completed copying $1 from container to host"
fi