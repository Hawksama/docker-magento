#!/usr/bin/env bash

# Define text formatting
bold=$(tput bold)
normal=$(tput sgr0)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
red=$(tput setaf 1)
blue=$(tput setaf 4)

# Function to fix the SQL file by replacing the problematic collation
fix_sql_file() {
  local original_file="$1"
  local fixed_file="${original_file%.sql}_fixed.sql"

  # Check if the file contains the problematic collation
  if bin/cli grep -q 'utf8mb4_0900_ai_ci' "$original_file"; then
    # Move the original file to a new fixed file
    bin/cli cp "$original_file" "$fixed_file"

    # Replace the problematic collation in the new file
    bin/cli sed -i 's/utf8mb4_0900_ai_ci/utf8mb4_general_ci/g' "$fixed_file"
  else
    # No need to fix the file if the collation is not present
    fixed_file="$original_file"  # Use the original file as is
  fi

  echo "$fixed_file"
}

# Function to select a file if there are multiple, or return the single file if only one exists
select_file() {
  files=$(bin/cli find dbdump -iregex '.*\.\(sql\|gz\)')
  file_count=$(echo "$files" | wc -w)

  if [ "$file_count" -eq 0 ]; then
    echo "${red}${bold}Error:${normal} There are no *.sql or *.gz files in the dbdump directory."
    exit 1
  elif [ "$file_count" -eq 1 ]; then
    echo "$files"  # Return the single file
  else
    select file in $files; do
      if [ -n "$file" ]; then
        echo "$file"
        return
      else
        echo "${red}${bold}Invalid selection. Please try again.${normal}"
        exit 1
      fi
    done
  fi
}

# Function to handle archive files (unarchive if needed)
unarchive_file() {
  local file="$1"
  local extension="${file##*.}"

  if [ "$extension" = "gz" ]; then
    local unzipped_file="${file%.gz}"
    bin/cli gunzip -dv "$file"
    echo "$unzipped_file"
  else
    echo "$file"
  fi
}

# Function to import a SQL file into the new database
import_sql_file() {
  local file="$1"
  echo "Using file: $file"

  # Unarchive if needed and fix collation
  local unarchived_file
  unarchived_file=$(unarchive_file "$file")
  local fixed_file
  fixed_file=$(fix_sql_file "$unarchived_file")

  echo "Importing $fixed_file into the new database..."
  bin/n98-magerun2 -v db:import "$fixed_file"
}

# Main script
echo "${blue}${bold}Starting database import script...${normal}"

if [ -z "$1" ]; then
  path=$(select_file)
else
  path="$1"
  echo "${yellow}${bold}File provided as argument:${normal} $path"
fi

extension="${path##*.}"

echo "${blue}${bold}Selected file:${normal} $path"

# Try to import the selected file and capture any errors
import_sql_file "$path" 2>&1

# Check the exit status of the import command
if [ $? -eq 0 ]; then
  echo "${green}${bold}Import completed successfully.${normal}"
else
  echo "${red}${bold}Error:${normal} Import failed. Please check the output above for details."
  exit 1
fi
