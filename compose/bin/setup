#!/usr/bin/env bash
set -o errexit

help()
{
   # Display Help
   echo "Prepare docker setup for project."
   echo
   echo "Syntax: [domain (optional parameter, by default www.magento.local)] [-m]"
   echo "options:"
   echo "h     Print this Help."
   echo "m     Prepare environment for macOS."
   echo
}

parse_parameter()
{
  case $1 in
        -h) # display Help
           help
           exit;;
        -m) # display Help
           MACSETUP=1;;
        -*) # Invalid option
           echo "Error: Invalid option, use -h to get help"
           exit;;
     esac
}

parse_parameter $1
SECOND_PARAM=$2

if [ "$1" == -m ]; then
    set --
fi

parse_parameter $SECOND_PARAM

MEM=$(docker info | grep "Total Memory" | cut -d':' -f2 | xargs | sed s/GiB//)
# Docker reports RAM 0.2 less than what it is actually set to
(( $(echo "$MEM < 5.7" | bc -l) )) && echo "There must be at least 6GB of RAM allocated to Docker to continue." && exit

# shellcheck source=../env/db.env
source env/db.env
# shellcheck source=../env/elasticsearch.env
source env/elasticsearch.env
# shellcheck source=../env/opensearch.env
source env/opensearch.env
# shellcheck source=../env/magento.env
source env/magento.env
# shellcheck source=../env/rabbitmq.env
source env/rabbitmq.env
# shellcheck source=../env/phpfpm.env
source env/phpfpm.env

DOMAIN=${MAGENTO_DOMAIN}

if [ -z $MACSETUP ]; then
    echo "Preparing setup installation for Linux environment and domain" "$DOMAIN"
    bin/cpsample
  else
    echo "Preparing setup installation for macOS environment and domain" "$DOMAIN"
    bin/cpsample -m
fi

bin/stop

bin/start --no-dev
[ $? != 0 ] && echo "Failed to start Docker services" && exit

echo "Copying project files to container..."
bin/copytocontainer --all

echo "Adding Magento modules to Composer allow-plugins directive..."
bin/clinotty composer config --no-plugins allow-plugins.magento/magento-composer-installer true
bin/clinotty composer config --no-plugins allow-plugins.magento/inventory-composer-installer true
bin/clinotty composer config --no-plugins allow-plugins.laminas/laminas-dependency-plugin true

echo "Installing composer modules..."
bin/composer install --ignore-platform-reqs

echo "Checking PHPFPM for issues in nginx configuration (Issues appeared in M2.4.6-p1) where php-fpm:9000 has replaced fastcgi_backend which broke the app container"
bin/check-requirements

if [ -n "$MACSETUP" ]; then
  echo "Copying files from container to host..."
  bin/copyfromcontainer vendor
fi

echo "Setting bin/magento executable permissions"
bin/clinotty chmod u+x bin/magento

echo "Importing database..."
bin/cli mysql -h"db" -u"magento" -p"magento" --execute="DROP DATABASE magento; CREATE DATABASE magento;"
bin/mysqlimport

echo "Cleaning redis cache and generated files..."
bin/redis redis-cli flushall
bin/clinotty rm -rf generated
bin/clinotty rm -rf var/*

echo "Running magento app:config:import..."
bin/clinotty bin/magento app:config:import

echo "Setting up elasticsearch.. to host {$ES_HOST} and port ${ES_HOST}.."
bin/magento config:set catalog/search/elasticsearch7_server_hostname "${ES_HOST}" --lock-env
bin/magento config:set catalog/search/elasticsearch7_server_port "${ES_PORT}" --lock-env
bin/magento config:set catalog/search/engine "${ES_VERSION}" --lock-env

echo "Running magento set:up..."
bin/clinotty bin/magento setup:up

echo "Creating admin user {$MAGENTO_ADMIN_USER} with password {$MAGENTO_ADMIN_PASSWORD}..."
bin/clinotty bin/magento admin:user:create --admin-user="$MAGENTO_ADMIN_USER" --admin-password="$MAGENTO_ADMIN_PASSWORD" --admin-email="$MAGENTO_ADMIN_EMAIL" --admin-firstname="$MAGENTO_ADMIN_FIRST_NAME" --admin-lastname="$MAGENTO_ADMIN_LAST_NAME"

echo "Forcing deploy of static content to speed up initial requests..."
bin/clinotty bin/magento setup:static-content:deploy -f

if [ -n "$MACSETUP" ]; then
  bin/copyfromcontainer lib
  bin/copyfromcontainer grunt-config.json.sample
  bin/copyfromcontainer Gruntfile.js.sample
  bin/copyfromcontainer nginx.conf.sample
  bin/copyfromcontainer package.json.sample
fi

bin/create_phpstan_files

echo "Setting basic URL and generating SSL certificate..."
bin/setup-domain "${DOMAIN}"

#echo "Re-indexing with Elasticsearch..."
bin/clinotty bin/magento indexer:reindex

echo "Clearing the cache to apply updates..."
bin/clinotty bin/magento cache:flush

echo "Installing cron, run 'bin/cron start' to enable..."
bin/clinotty bin/magento cron:install

echo "Turning on developer mode..."
bin/clinotty bin/magento deploy:mode:set developer

echo "Docker development environment setup complete."
echo "You may now access your Magento instance at https://${DOMAIN}/"
