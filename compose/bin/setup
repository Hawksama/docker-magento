#!/usr/bin/env bash
set -o errexit

start_time=$(date +%s)  # Record the start time

# Define text formatting
bold=$(tput bold)
normal=$(tput sgr0)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
red=$(tput setaf 1)
blue=$(tput setaf 4)

help() {
    # Display Help
    echo "${bold}${blue}Prepare docker setup for project.${normal}"
    echo
    echo "Syntax: [domain (optional parameter, by default www.magento.local)] [-m] [-n]"
    echo "options:"
    echo "  ${bold}h${normal}     Print this Help."
    echo "  ${bold}m${normal}     Prepare environment for macOS."
    echo "  ${bold}n${normal}     Perform a new setup after using bin/download to initialize ./src with a new Magento project."
    echo "  ${bold}v${normal}     Specify Magento version for compose file (e.g., 2.3.3, 2.3.7, 2.4.6-php8.1, latest)"
    echo
}

# Parse parameters
while getopts ":hmnv:" opt; do
    case ${opt} in
        h )
            help
            exit 0
            ;;
        m )
            MACSETUP=1
            echo "${yellow}Parameter -m detected${normal}"
            ;;
        n )
            NEWSETUP=1
            echo "${yellow}Parameter -n detected${normal}"
            ;;
        v )
            VERSION=$OPTARG
            echo "${yellow}Parameter -v detected with value ${VERSION}${normal}"
            ;;
        \? )
            echo "${red}Invalid option: $OPTARG${normal}" 1>&2
            help
            exit 1
            ;;
        : )
            echo "${red}Invalid option: $OPTARG requires an argument${normal}" 1>&2
            help
            exit 1
            ;;
    esac
done

MEM=$(docker info | grep "Total Memory" | cut -d':' -f2 | xargs | sed s/GiB//)
# Docker reports RAM 0.2 less than what it is actually set to
if (( $(echo "$MEM < 5.7" | bc -l) )); then
    echo "${red}There must be at least 6GB of RAM allocated to Docker to continue.${normal}"
    exit
fi

bin/update_phpfpm_env

# shellcheck source=../env/db.env
source env/db.env
# shellcheck source=../env/magento.env
source env/magento.env
# shellcheck source=../env/rabbitmq.env
source env/rabbitmq.env
# shellcheck source=../env/phpfpm.env
source env/phpfpm.env

DOMAIN=${MAGENTO_DOMAIN}

bin/stopall

if [ -z $MACSETUP ]; then
    echo "${green}Preparing setup installation for Linux environment and domain ${DOMAIN}${normal}"
    if [ -n "$VERSION" ]; then
        if [ "$VERSION" == "2.3.3" ]; then
            bin/cpsample -v "2.3.7"  # Execute only if version is 2.3.3
        else
            bin/cpsample -v "$VERSION"
        fi
    else
        bin/cpsample
    fi
else
    echo "${green}Preparing setup installation for macOS environment and domain ${DOMAIN}${normal}"
    if [ -n "$VERSION" ]; then
        if [ "$VERSION" == "2.3.3" ]; then
            bin/cpsample -m -v "2.3.7"  # Execute only if version is 2.3.3
        else
            bin/cpsample -m -v "$VERSION"
        fi
    else
        bin/cpsample -m
    fi
fi

bin/start --no-dev
# Check the exit status of the start script
if [ $? != 0 ]; then
    echo "${red}Failed to start Docker services${normal}"
    exit
fi

# Check if auth.json exists to avoid Composer authentication errors
bin/setup-composer-auth

bin/check-broken-symlinks
# Check the exit status of the check-broken-symlinks script
if [ $? != 0 ]; then
    echo "${red}Aborting script due to broken symlinks.${normal}"
    exit 1
fi

echo "${blue}Copying project files to container...${normal}"
bin/copytocontainer --all

echo "${blue}Adding Magento modules to Composer allow-plugins directive...${normal}"
bin/clinotty composer config --no-plugins allow-plugins.magento/magento-composer-installer true
bin/clinotty composer config --no-plugins allow-plugins.magento/inventory-composer-installer true
bin/clinotty composer config --no-plugins allow-plugins.laminas/laminas-dependency-plugin true

echo "${blue}Installing composer modules...${normal}"
bin/composer install --ignore-platform-reqs

if [ "$VERSION" == "2.3.3" ] || [ "$VERSION" == "2.3.7" ]; then
    # Wait for user input
    echo "${green}Composer install completed.${normal}"
    echo "${yellow}Please fix the xdebug bug by editing the vendor/magento/magento2-functional-testing-framework/src/Magento/FunctionalTestingFramework/_bootstrap.php${normal}"
    echo "${yellow}You can find the fix on: https://tinyurl.com/mrdr4jn${normal}"
    bin/fix_xdebug
fi

bin/check-requirements

echo "${blue}Setting bin/magento executable permissions${normal}"
bin/clinotty chmod u+x bin/magento

if [ -n "$NEWSETUP" ]; then
    echo "${green}Performing a new setup from scratch for domain ${DOMAIN}${normal}"
    bin/setup-install
else
    echo "${blue}Importing database...${normal}"
    bin/cli mysql -h"db" -u"magento" -p"magento" --execute="DROP DATABASE magento; CREATE DATABASE magento;"
    bin/mysqlimport
fi

echo "${blue}Cleaning redis cache and generated files...${normal}"
bin/redis redis-cli flushall
bin/clinotty rm -rf generated
bin/clinotty rm -rf var/*

if [ -z $MACSETUP ]; then
    if [ -n "$VERSION" ]; then
        if [ "$VERSION" == "2.3.3" ]; then
            echo "${yellow}Reverting docker configuration to PHP 7.3 after composer:install has finished to avoid setup:di:compile errors${normal}"
            bin/cpsample -v "2.3.3"

            bin/stop
            bin/start --no-dev
            if [ $? != 0 ]; then
                echo "${red}Failed to start Docker services${normal}"
                exit
            fi
        fi
    fi
else
    if [ -n "$VERSION" ]; then
        if [ "$VERSION" == "2.3.3" ]; then
            echo "${yellow}Reverting docker configuration to PHP 7.3 after composer:install has finished to avoid setup:di:compile errors${normal}"
            bin/cpsample -m -v "2.3.3"

            bin/stop
            bin/start --no-dev
            if [ $? != 0 ]; then
                echo "${red}Failed to start Docker services${normal}"
                exit
            fi
        fi
    fi
fi

echo "Running magento app:config:import..."
bin/clinotty bin/magento app:config:import

echo "Attempting to set up search engine..."
bin/setup-search-engine

echo "${blue}Running magento set:up...${normal}"
bin/clinotty bin/magento setup:up

echo "${blue}Creating admin user ${MAGENTO_ADMIN_USER} with password ${MAGENTO_ADMIN_PASSWORD}.${normal}"
bin/clinotty bin/magento admin:user:create --admin-user="$MAGENTO_ADMIN_USER" --admin-password="$MAGENTO_ADMIN_PASSWORD" --admin-email="$MAGENTO_ADMIN_EMAIL" --admin-firstname="$MAGENTO_ADMIN_FIRST_NAME" --admin-lastname="$MAGENTO_ADMIN_LAST_NAME"

echo "${blue}Forcing deploy of static content to speed up initial requests.${normal}"
bin/clinotty bin/magento setup:static-content:deploy -f

echo "${blue}Updating active theme in env/theme.env${normal}"
bin/update-active-theme

if [ -n "$MACSETUP" ]; then
    bin/copyfromcontainer lib
    bin/copyfromcontainer nginx.conf.sample
fi

bin/create_phpstan_files

if [ -n "$MACSETUP" ]; then
    echo "${blue}Copying files from container to host.${normal}"
    bin/copyfromcontainer dev
    bin/copyfromcontainer pub/media
fi

if [ -n "$NEWSETUP" ]; then
    echo "${blue}Copying app folder from container to host.${normal}"
    bin/copyfromcontainer app

    bin/clinotty cp auth.json.sample auth.json
    bin/copyfromcontainer auth.json
    mkdir src/dbdump
fi

echo "${blue}Setting basic URL and generating SSL certificate.${normal}"
bin/setup-domain "${DOMAIN}"

echo "${blue}Re-indexing with selected search engine.${normal}"
bin/clinotty bin/magento indexer:reindex

echo "${blue}Clearing the cache to apply updates.${normal}"
bin/clinotty bin/magento cache:flush

echo "${blue}Installing cron, run ‘bin/cron start’ to enable${normal}"
bin/clinotty bin/magento cron:install

echo "${blue}Turning on developer mode.${normal}"
bin/clinotty bin/magento deploy:mode:set developer

if [ -n "$MACSETUP" ]; then
    echo "${blue}Copying files from container to host.${normal}"
    bin/copyfromcontainer vendor
    bin/copyfromcontainer generated
fi

echo "${green}Docker development environment setup complete.${normal}"
echo "${green}You may now access your Magento instance at https://${DOMAIN}/${normal}"

end_time=$(date +%s)
elapsed_seconds=$(( end_time - start_time ))

# Convert total seconds to minutes and seconds
elapsed_minutes=$(( elapsed_seconds / 60 ))
remaining_seconds=$(( elapsed_seconds % 60 ))

echo "${blue}Total execution time: ${elapsed_minutes} minute(s) and ${remaining_seconds} second(s)${normal}"
