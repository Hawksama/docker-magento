#!/usr/bin/env bash
set -o errexit

help() {
    # Display Help
    echo "Prepare docker setup for project."
    echo
    echo "Syntax: [domain (optional parameter, by default www.magento.local)] [-m] [-n]"
    echo "options:"
    echo "h     Print this Help."
    echo "m     Prepare environment for macOS."
    echo "n     Perform a new setup after using bin/download to initialize ./src with a new Magento project."
    echo "v     Specify Magento version for compose file (e.g., 2.3.3, 2.3.7, 2.4.6-php8.1, latest)"
    echo
}

# Parse parameters
while getopts ":hmnv:" opt; do
    case ${opt} in
        h )
            help
            exit 0
            ;;
        m )
            MACSETUP=1
            echo "Parameter -m detected"
            ;;
        n )
            NEWSETUP=1
            echo "Parameter -n detected"
            ;;
        v )
            VERSION=$OPTARG
            echo "Parameter -v detected with value $VERSION"
            ;;
        \? )
            echo "Invalid option: $OPTARG" 1>&2
            help
            exit 1
            ;;
        : )
            echo "Invalid option: $OPTARG requires an argument" 1>&2
            help
            exit 1
            ;;
    esac
done

MEM=$(docker info | grep "Total Memory" | cut -d':' -f2 | xargs | sed s/GiB//)
# Docker reports RAM 0.2 less than what it is actually set to
(( $(echo "$MEM < 5.7" | bc -l) )) && echo "There must be at least 6GB of RAM allocated to Docker to continue." && exit

# shellcheck source=../env/db.env
source env/db.env
# shellcheck source=../env/elasticsearch.env
source env/elasticsearch.env
# shellcheck source=../env/opensearch.env
source env/opensearch.env
# shellcheck source=../env/magento.env
source env/magento.env
# shellcheck source=../env/rabbitmq.env
source env/rabbitmq.env
# shellcheck source=../env/phpfpm.env
source env/phpfpm.env

DOMAIN=${MAGENTO_DOMAIN}

if [ -z $MACSETUP ]; then
    echo "Preparing setup installation for Linux environment and domain" "$DOMAIN"
    if [ -n "$VERSION" ]; then
        if [ "$VERSION" == "2.3.3" ]; then
            bin/cpsample -v "2.3.7"  # Execute only if version is 2.3.3
        else
            bin/cpsample -v "$VERSION"
        fi
    else
      bin/cpsample
    fi
else
    echo "Preparing setup installation for macOS environment and domain" "$DOMAIN"
    if [ -n "$VERSION" ]; then
        if [ "$VERSION" == "2.3.3" ]; then
            bin/cpsample -m -v "2.3.7"  # Execute only if version is 2.3.3
        else
            bin/cpsample -m -v "$VERSION"
        fi
    else
      bin/cpsample -m
    fi
fi

bin/stop

bin/start --no-dev
[ $? != 0 ] && echo "Failed to start Docker services" && exit

# Call the check_broken_symlinks script
bin/check_broken_symlinks.sh
# Check the exit status of the check_broken_symlinks script
[ $? -ne 0 ] echo "Aborting script due to broken symlinks." exit 1


echo "Copying project files to container..."
bin/copytocontainer --all

echo "Adding Magento modules to Composer allow-plugins directive..."
bin/clinotty composer config --no-plugins allow-plugins.magento/magento-composer-installer true
bin/clinotty composer config --no-plugins allow-plugins.magento/inventory-composer-installer true
bin/clinotty composer config --no-plugins allow-plugins.laminas/laminas-dependency-plugin true

echo "Installing composer modules..."
bin/composer install --ignore-platform-reqs


if [ "$VERSION" == "2.3.3" ] || [ "$VERSION" == "2.3.7" ]; then
    # Wait for user input
    echo "Composer install completed."
    echo "Please fix the xdebug bug by editing the vendor/magento/magento2-functional-testing-framework/src/Magento/FunctionalTestingFramework/_bootstrap.php"
    echo "You can find the fix on: https://tinyurl.com/mrdr4jn"
    bin/fix_xdebug
fi

echo "Checking PHPFPM for issues in nginx configuration (Issues appeared in M2.4.6-p1) where php-fpm:9000 has replaced fastcgi_backend which broke the app container"
bin/check-requirements

echo "Setting bin/magento executable permissions"
bin/clinotty chmod u+x bin/magento


if [ -n "$NEWSETUP" ]; then
    echo "Performing a new setup from scratch for domain" "$DOMAIN"
    bin/setup-install
else
    echo "Importing database..."
    bin/cli mysql -h"db" -u"magento" -p"magento" --execute="DROP DATABASE magento; CREATE DATABASE magento;"
    bin/mysqlimport
fi

echo "Cleaning redis cache and generated files..."
bin/redis redis-cli flushall
bin/clinotty rm -rf generated
bin/clinotty rm -rf var/*

if [ -z $MACSETUP ]; then
    if [ -n "$VERSION" ]; then
        if [ "$VERSION" == "2.3.3" ]; then
            echo "Reverting docker configuration to PHP 7.3 after composer:install has finished to avoid setup:di:compile errors"
            bin/cpsample -v "2.3.3"

            bin/stop
            bin/start --no-dev
            [ $? != 0 ] && echo "Failed to start Docker services" && exit
        fi
    fi
else
    if [ -n "$VERSION" ]; then
        if [ "$VERSION" == "2.3.3" ]; then
            echo "Reverting docker configuration to PHP 7.3 after composer:install has finished to avoid setup:di:compile errors"
            bin/cpsample -m -v "2.3.3"

            bin/stop
            bin/start --no-dev
            [ $? != 0 ] && echo "Failed to start Docker services" && exit
        fi
    fi
fi

echo "Running magento app:config:import..."
bin/clinotty bin/magento app:config:import

# Ask user to choose between Elasticsearch and ElasticSuite
echo "Choose the search engine to configure:"
echo "1) Elasticsearch"
echo "2) ElasticSuite"
read -p "Enter the number of your choice: " search_engine_choice

if [ "$search_engine_choice" == "1" ]; then
    echo "Setting up Elasticsearch.. to host ${ES_HOST} and port ${ES_PORT}.."
    bin/magento config:set catalog/search/elasticsearch7_server_hostname "${ES_HOST}" --lock-env
    bin/magento config:set catalog/search/elasticsearch7_server_port "${ES_PORT}" --lock-env
    bin/magento config:set catalog/search/engine "${ES_VERSION}" --lock-env
    echo "Elasticsearch configuration completed."
elif [ "$search_engine_choice" == "2" ]; then
    echo "Setting up ElasticSuite..."
    bin/magento config:set smile_elasticsuite_core_base_settings/es_client/servers "${ES_VERSION}:${ES_PORT}" --lock-env
    bin/magento config:set smile_elasticsuite_core_base_settings/enable_https_mode '0' --lock-env
    bin/magento config:set smile_elasticsuite_core_base_settings/enable_http_auth '0' --lock-env
    bin/magento config:set smile_elasticsuite_core_base_settings/http_auth_user '' --lock-env
    bin/magento config:set smile_elasticsuite_core_base_settings/http_auth_pwd '' --lock-env
    bin/magento config:set catalog/search/engine "${ELASTICSUITE}" --lock-env
    echo "ElasticSuite configuration completed."
else
    echo "Invalid choice. Exiting."
    exit 1
fi

echo "Running magento set:up..."
bin/clinotty bin/magento setup:up

echo "Creating admin user ${MAGENTO_ADMIN_USER} with password ${MAGENTO_ADMIN_PASSWORD}..."
bin/clinotty bin/magento admin:user:create --admin-user="$MAGENTO_ADMIN_USER" --admin-password="$MAGENTO_ADMIN_PASSWORD" --admin-email="$MAGENTO_ADMIN_EMAIL" --admin-firstname="$MAGENTO_ADMIN_FIRST_NAME" --admin-lastname="$MAGENTO_ADMIN_LAST_NAME"

echo "Forcing deploy of static content to speed up initial requests..."
bin/clinotty bin/magento setup:static-content:deploy -f

if [ -n "$MACSETUP" ]; then
    bin/copyfromcontainer lib
    bin/copyfromcontainer grunt-config.json.sample
    bin/copyfromcontainer Gruntfile.js.sample
    bin/copyfromcontainer nginx.conf.sample
    bin/copyfromcontainer package.json.sample
fi

bin/create_phpstan_files

if [ -n "$MACSETUP" ]; then
    echo "Copying files from container to host..."
    bin/copyfromcontainer dev
    bin/copyfromcontainer pub/media
fi

if [ -n "$NEWSETUP" ]; then
    echo "Copying app folder from container to host..."
    bin/copyfromcontainer app

    bin/clinotty cp auth.json.sample auth.json
    bin/copyfromcontainer auth.json
    mkdir src/dbdump
fi

echo "Setting basic URL and generating SSL certificate..."
bin/setup-domain "${DOMAIN}"

echo "Re-indexing with selected search engine..."
bin/clinotty bin/magento indexer:reindex

echo "Clearing the cache to apply updates..."
bin/clinotty bin/magento cache:flush

echo "Installing cron, run 'bin/cron start' to enable..."
bin/clinotty bin/magento cron:install

echo "Turning on developer mode..."
bin/clinotty bin/magento deploy:mode:set developer

echo "Docker development environment setup complete."
echo "You may now access your Magento instance at https://${DOMAIN}/"

if [ -n "$MACSETUP" ]; then
    echo "Copying files from container to host..."
    bin/copyfromcontainer vendor
    bin/copyfromcontainer generated
fi
